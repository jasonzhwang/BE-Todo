{"ast":null,"code":"var _jsxFileName = \"/Users/jayjay/Documents/react-practice/src/components/Tasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Checkbox } from './Checkbox';\nimport { AddTask } from './AddTask';\nimport { useTasks } from '../hooks';\nimport { collatedTasks } from '../constants';\nimport { getTitle, getCollatedTitle, collatedTasksExist } from '../helpers';\nimport { useSelectedProjectValue, useProjectsValue } from '../context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Tasks = () => {\n  _s();\n\n  const {\n    selectedProject\n  } = useSelectedProjectValue();\n  const {\n    projects\n  } = useProjectsValue();\n  const {\n    tasks\n  } = useTasks(selectedProject);\n  let projectName = '';\n\n  if (collatedTasksExist(selectedProject) && selectedProject) {\n    projectName = getCollatedTitle(collatedTasks, selectedProject).name;\n  }\n\n  if (projects && projects.length > 0 && selectedProject && !collatedTasksExist(selectedProject)) {\n    projectName = getTitle(projects, selectedProject).name;\n  }\n\n  useEffect(() => {\n    document.title = `${projectName}: Todoist`;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tasks\",\n    \"data-testid\": \"tasks\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      \"data-testid\": \"project-name\",\n      children: projectName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"tasks__list\",\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n          id: task.id,\n          taskDesc: task.task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: task.task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, `${task.id}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTask, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tasks, \"thsMrt5gYIIVY+9yxer4YyUetlA=\", false, function () {\n  return [useSelectedProjectValue, useProjectsValue, useTasks];\n});\n\n_c = Tasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"names":["React","useEffect","Checkbox","AddTask","useTasks","collatedTasks","getTitle","getCollatedTitle","collatedTasksExist","useSelectedProjectValue","useProjectsValue","Tasks","selectedProject","projects","tasks","projectName","name","length","document","title","map","task","id"],"sources":["/Users/jayjay/Documents/react-practice/src/components/Tasks.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { Checkbox } from './Checkbox';\nimport { AddTask } from './AddTask';\nimport { useTasks } from '../hooks';\nimport { collatedTasks } from '../constants';\nimport { getTitle, getCollatedTitle, collatedTasksExist } from '../helpers';\nimport { useSelectedProjectValue, useProjectsValue } from '../context';\n\nexport const Tasks = () => {\n  const { selectedProject } = useSelectedProjectValue();\n  const { projects } = useProjectsValue();\n  const { tasks } = useTasks(selectedProject);\n\n  let projectName = '';\n\n  if (collatedTasksExist(selectedProject) && selectedProject) {\n    projectName = getCollatedTitle(collatedTasks, selectedProject).name;\n  }\n\n  if (\n    projects &&\n    projects.length > 0 &&\n    selectedProject &&\n    !collatedTasksExist(selectedProject)\n  ) {\n    projectName = getTitle(projects, selectedProject).name;\n  }\n\n  useEffect(() => {\n    document.title = `${projectName}: Todoist`;\n  });\n\n  return (\n    <div className=\"tasks\" data-testid=\"tasks\">\n      <h2 data-testid=\"project-name\">{projectName}</h2>\n\n      <ul className=\"tasks__list\">\n        {tasks.map((task) => (\n          <li key={`${task.id}`}>\n            <Checkbox id={task.id} taskDesc={task.task} />\n            <span>{task.task}</span>\n          </li>\n        ))}\n      </ul>\n\n      <AddTask />\n    </div>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,QAAT,QAAyB,UAAzB;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,QAAT,EAAmBC,gBAAnB,EAAqCC,kBAArC,QAA+D,YAA/D;AACA,SAASC,uBAAT,EAAkCC,gBAAlC,QAA0D,YAA1D;;AAEA,OAAO,MAAMC,KAAK,GAAG,MAAM;EAAA;;EACzB,MAAM;IAAEC;EAAF,IAAsBH,uBAAuB,EAAnD;EACA,MAAM;IAAEI;EAAF,IAAeH,gBAAgB,EAArC;EACA,MAAM;IAAEI;EAAF,IAAYV,QAAQ,CAACQ,eAAD,CAA1B;EAEA,IAAIG,WAAW,GAAG,EAAlB;;EAEA,IAAIP,kBAAkB,CAACI,eAAD,CAAlB,IAAuCA,eAA3C,EAA4D;IAC1DG,WAAW,GAAGR,gBAAgB,CAACF,aAAD,EAAgBO,eAAhB,CAAhB,CAAiDI,IAA/D;EACD;;EAED,IACEH,QAAQ,IACRA,QAAQ,CAACI,MAAT,GAAkB,CADlB,IAEAL,eAFA,IAGA,CAACJ,kBAAkB,CAACI,eAAD,CAJrB,EAKE;IACAG,WAAW,GAAGT,QAAQ,CAACO,QAAD,EAAWD,eAAX,CAAR,CAAoCI,IAAlD;EACD;;EAEDf,SAAS,CAAC,MAAM;IACdiB,QAAQ,CAACC,KAAT,GAAkB,GAAEJ,WAAY,WAAhC;EACD,CAFQ,CAAT;EAIA,oBACE;IAAK,SAAS,EAAC,OAAf;IAAuB,eAAY,OAAnC;IAAA,wBACE;MAAI,eAAY,cAAhB;MAAA,UAAgCA;IAAhC;MAAA;MAAA;MAAA;IAAA,QADF,eAGE;MAAI,SAAS,EAAC,aAAd;MAAA,UACGD,KAAK,CAACM,GAAN,CAAWC,IAAD,iBACT;QAAA,wBACE,QAAC,QAAD;UAAU,EAAE,EAAEA,IAAI,CAACC,EAAnB;UAAuB,QAAQ,EAAED,IAAI,CAACA;QAAtC;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAA,UAAOA,IAAI,CAACA;QAAZ;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA,GAAU,GAAEA,IAAI,CAACC,EAAG,EAApB;QAAA;QAAA;QAAA;MAAA,QADD;IADH;MAAA;MAAA;MAAA;IAAA,QAHF,eAYE,QAAC,OAAD;MAAA;MAAA;MAAA;IAAA,QAZF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAgBD,CAxCM;;GAAMX,K;UACiBF,uB,EACPC,gB,EACHN,Q;;;KAHPO,K"},"metadata":{},"sourceType":"module"}